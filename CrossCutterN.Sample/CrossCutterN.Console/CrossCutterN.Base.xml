<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CrossCutterN.Base</name>
    </assembly>
    <members>
        <member name="T:CrossCutterN.Base.Common.IBuilder`1">
            <summary>
            Interface that can build to another type.
            </summary>
            <typeparam name="T">Type to be built to.</typeparam>
        </member>
        <member name="M:CrossCutterN.Base.Common.IBuilder`1.Build">
            <summary>
            Builds to another class T.
            </summary>
            <returns>Built result.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Common.IHasId`1">
            <summary>
            Interface for a class which has an Id.
            </summary>
            <typeparam name="T">Type of Id.</typeparam>
        </member>
        <member name="P:CrossCutterN.Base.Common.IHasId`1.Key">
            <summary>
            Gets Id of the item.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Common.IHasSortKey`1">
            <summary>
            Class that has a sort key defined.
            </summary>
            <typeparam name="T">Type of the sort key.</typeparam>
        </member>
        <member name="P:CrossCutterN.Base.Common.IHasSortKey`1.SortKey">
            <summary>
            Gets the sort key.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Common.IndexedSortedCollection`3">
            <summary>
            Read only collection implementation indexed by id and sortable by a key.
            </summary>
            <typeparam name="TR">Type of collection item.</typeparam>
            <typeparam name="TI">Type of look up Id.</typeparam>
            <typeparam name="TS">Type of sort key.</typeparam>
        </member>
        <member name="P:CrossCutterN.Base.Common.IndexedSortedCollection`3.All">
            <summary>
            Gets all added contents in the collection.
            </summary>
            <returns>All stored values sorted.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Common.IndexedSortedCollection`3.Add(`0)">
            <summary>
            Adds a value into the collection.
            </summary>
            <param name="w">Value to be added to the collection.</param>
        </member>
        <member name="M:CrossCutterN.Base.Common.IndexedSortedCollection`3.ContainsId(`1)">
            <summary>
            Checks if the collection contains an item with the given Id.
            </summary>
            <param name="id">Id of an item.</param>
            <returns>True if the collection contains an item with the given Id, false elsewise.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Common.IndexedSortedCollection`3.Get(`1)">
            <summary>
            Gets item with the given Id.
            </summary>
            <param name="id">Id of an item.</param>
            <returns>The item with the given Id.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Common.IrreversibleOperation">
            <summary>
            Irreversible operation class, used as utility.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Common.IrreversibleOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Common.IrreversibleOperation"/> class.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Common.IrreversibleOperation.Assert(System.Boolean)">
            <summary>
            Checks if irreversible operation has been applied, throws exception if input expected applied status isn't the same with internal applied status.
            </summary>
            <param name="applied">Expected applied status.</param>
        </member>
        <member name="M:CrossCutterN.Base.Common.IrreversibleOperation.Apply">
            <summary>
            Applies the irreversible operation.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Common.ReflectionUtility">
            <summary>
            Reflection utility class.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Common.ReflectionUtility.GetFullName(System.Type)">
            <summary>
            Gets the formatted full name of a class, the format is generally used by CrossCutterN.
            </summary>
            <param name="type">Class the full name of which will be </param>
            <returns>Full name of a class used by CrossCutterN.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Common.ReflectionUtility.GetSignature(System.Reflection.MethodInfo)">
            <summary>
            Gets the formatted method signature of a method, the format is generally used by CrossCutterN
            </summary>
            <param name="method">Method whose signature will be retrieved.</param>
            <returns>Signature of the method.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Common.ReflectionUtility.GetFullName(System.Reflection.MethodInfo)">
            <summary>
            Gets the formatted method full name, the format is generally used by CrossCutterN
            </summary>
            <param name="method">Method whose signature will be retrieved.</param>
            <returns>Signature of the method.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Common.StringIndexedIntSortedCollection`1">
            <summary>
            Read only collection implementation indexed by string id and sortable by integer key.
            </summary>
            <typeparam name="TR">Type of collection item.</typeparam>
        </member>
        <member name="M:CrossCutterN.Base.Common.StringIndexedIntSortedCollection`1.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Concern.ConcernClassAttribute">
            <summary>
            Base attribute used for class concern. It is declared to be abstract to force users to use customized attributes.
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernPropertyGetterPropertyName">
            <summary>
            Property name for concerning property getters
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernPropertySetterPropertyName">
            <summary>
            Property name for concerning property setters
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernMethodPropertyName">
            <summary>
            Property name for concerning method
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernConstructorPropertyName">
            <summary>
            Property name for concerning constructor
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernPublicPropertyName">
            <summary>
            Property name for concerning public methods and properties
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernPrivatePropertyName">
            <summary>
            Property name for concerning private methods and properties
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernProtectedPropertyName">
            <summary>
            Property name for concerning protected methods and properties
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernInternalPropertyName">
            <summary>
            Property name for concerning internal methods and properties
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernStaticPropertyName">
            <summary>
            Property name for concerning static methods and properties
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernInstancePropertyName">
            <summary>
            Property name for concerning instance methods and properties
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernPropertyGetter">
            <summary>
            Gets or sets a value indicating whether property getters are concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernPropertySetter">
            <summary>
            Gets or sets a value indicating whether property setters are concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernMethod">
            <summary>
            Gets or sets a value indicating whether methods are concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernConstructor">
            <summary>
            Gets or sets a value indicating whether constructors are concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernPublic">
            <summary>
            Gets or sets a value indicating whether public methods and properties are concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernPrivate">
            <summary>
            Gets or sets a value indicating whether private methods and properties are concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernProtected">
            <summary>
            Gets or sets a value indicating whether protected methods and properties are concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernInternal">
            <summary>
            Gets or sets a value indicating whether internal methods and properties are concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernStatic">
            <summary>
            Gets or sets a value indicating whether static methods and properties are concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernClassAttribute.ConcernInstance">
            <summary>
            Gets or sets a value indicating whether instance methods and properties are concerned
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Concern.ConcernMethodAttribute">
            <summary>
            Base attribute for concerning method and property getter/setter methods. It is declared to be abstract to force users to use customized attributes.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Concern.ConcernPropertyAttribute">
            <summary>
            Base attribute for concerning properties. It is declared to be abstract to force users to use customized attributes.
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernPropertyAttribute.ConcernGetterPropertyName">
            <summary>
            Property name for concerning getter of the property
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Concern.ConcernPropertyAttribute.ConcernSetterPropertyName">
            <summary>
            Property name for concerning setter of the property
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernPropertyAttribute.ConcernGetter">
            <summary>
            Gets or sets a value indicating whether getter of the property is concerned
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Concern.ConcernPropertyAttribute.ConcernSetter">
            <summary>
            Gets or sets a value indicating whether setter of the property is concerned
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Concern.NoConcernAttribute">
            <summary>
            Base attribute for marking methods/properties/properties getter methods/property setter methods not to be concerned. It is declared to be abstract to force users to use customized attributes.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.AttributeProperty">
            <summary>
            Attribute property metadata implementation for properties of attributes.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.AttributeProperty.#ctor(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Metadata.AttributeProperty"/> class.
            </summary>
            <param name="name">Name of the attribute property.</param>
            <param name="typeName">Type name of the attribute property.</param>
            <param name="sequence">Sequence of the attribute property in the attribute.</param>
            <param name="value">Value of the attribute property.</param>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.AttributeProperty.Name">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.AttributeProperty.TypeName">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.AttributeProperty.Value">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.AttributeProperty.Sequence">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.AttributeProperty.Key">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.AttributeProperty.SortKey">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.CustomAttribute">
            <summary>
            Custom attribute metadata implementation.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.CustomAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Metadata.CustomAttribute"/> class.
            </summary>
            <param name="typeName">Type name of the custom attribute</param>
            <param name="sequence">Sequence of the custom attribute in the parameter</param>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.CustomAttribute.TypeName">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.CustomAttribute.Sequence">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.CustomAttribute.Properties">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.CustomAttribute.GetProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.CustomAttribute.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.CustomAttribute.AddAttributeProperty(CrossCutterN.Base.Metadata.IAttributeProperty)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.CustomAttribute.Build">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.Execution">
            <summary>
            Method execution metadata implementation.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Execution.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Metadata.Execution"/> class.
            </summary>
            <param name="assemblyFullName">Full name of assembly this method is defined in.</param>
            <param name="nameSpace">Namespace this method is defined in.</param>
            <param name="classFullName">Full name of the class this method is defined in.</param>
            <param name="className">Name of the class this method is defined in.</param>
            <param name="fullName">Full name of the method.</param>
            <param name="name">Name of the method.</param>
            <param name="returnType">Return type of the method.</param>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Execution.AssemblyFullName">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Execution.Namespace">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Execution.ClassFullName">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Execution.ClassName">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Execution.FullName">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Execution.Name">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Execution.ReturnType">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Execution.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Execution.AddParameter(CrossCutterN.Base.Metadata.IParameter)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Execution.GetParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Execution.HasParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Execution.Build">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.ExecutionContext">
            <summary>
            Execution context implementation used to pass objects among AOP methods
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.ExecutionContext.Set(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.ExecutionContext.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.ExecutionContext.Get(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.ExecutionContext.Exist(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.IAttributeProperty">
            <summary>
            Attribute property metadata interface.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IAttributeProperty.Name">
            <summary>
            Gets name of the attribute property.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IAttributeProperty.TypeName">
            <summary>
            Gets type name of the attribute property.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IAttributeProperty.Sequence">
            <summary>
            Gets sequence of the attribute property in the attribute.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IAttributeProperty.Value">
            <summary>
            Gets value of the attribute property.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.ICustomAttribute">
            <summary>
            Custom attribute metadata interface.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.ICustomAttribute.TypeName">
            <summary>
            Gets type name of the custom attribute.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.ICustomAttribute.Sequence">
            <summary>
             Gets sequence of the custom attribute in the method or property.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.ICustomAttribute.Properties">
            <summary>
            Gets properties of the custom attribute.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.ICustomAttribute.GetProperty(System.String)">
            <summary>
            Gets an attribute property by it's name.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>Attribute property metadata retrieved.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.ICustomAttribute.HasProperty(System.String)">
            <summary>
            Checks whether the custom attribute has the property with the name.
            </summary>
            <param name="name">Name of attribute property.</param>
            <returns>True if the custom attribute has the property with the name, false elsewise.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.ICustomAttributeBuilder">
            <summary>
            Interface for custom attribute metadata being built up.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.ICustomAttributeBuilder.AddAttributeProperty(CrossCutterN.Base.Metadata.IAttributeProperty)">
            <summary>
            Adds property metadata to this attribute metadata.
            </summary>
            <param name="property">Property metadata to be added.</param>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.IExecution">
            <summary>
            Method execution metadata interface.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IExecution.AssemblyFullName">
            <summary>
            Gets full name of assembly this method is defined in.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IExecution.Namespace">
            <summary>
            Gets namespace this method is defined in.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IExecution.ClassFullName">
            <summary>
            Gets full name of the class this method is defined in.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IExecution.ClassName">
            <summary>
            Gets name of the class this method is defined in.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IExecution.FullName">
            <summary>
            Gets full name of the method.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IExecution.Name">
            <summary>
            Gets name of the method.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IExecution.ReturnType">
            <summary>
            Gets return type of the method.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IExecution.Parameters">
            <summary>
            Gets metadata of all parameters of the method.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.IExecution.GetParameter(System.String)">
            <summary>
            Gets metadata of a parameter based on the parameter name.
            </summary>
            <param name="name">Name of the parameter.</param>
            <returns>Metadata of the parameter.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.IExecution.HasParameter(System.String)">
            <summary>
            Checks if the method has a parameter with the name.
            </summary>
            <param name="name">Name of the parameter.</param>
            <returns>True if the method has the parameter with the name, false elsewise.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.IExecutionBuilder">
            <summary>
            Method execution metadata being built up.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.IExecutionBuilder.AddParameter(CrossCutterN.Base.Metadata.IParameter)">
            <summary>
            Adds a parameter to the method execution.
            </summary>
            <param name="parameter">Parameter to be added.</param>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.IExecutionContext">
            <summary>
            Interface of execution context.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.IExecutionContext.Set(System.Object,System.Object)">
            <summary>
            Set key value pair.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.IExecutionContext.Remove(System.Object)">
            <summary>
            Remove value by key.
            </summary>
            <param name="key">Key of the value.</param>
            <returns>True if a value is removed, otherwise false.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.IExecutionContext.Get(System.Object)">
            <summary>
            Gets value according to its key.
            </summary>
            <param name="key">Key of the value.</param>
            <returns>Retrieved value.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.IExecutionContext.Exist(System.Object)">
            <summary>
            Checks whether a key is set in the context.
            </summary>
            <param name="key">Key of value.</param>
            <returns>True if the key is set in the context, false elsewise.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.IParameter">
            <summary>
            Parameter metadata of executed method.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IParameter.Name">
            <summary>
            Gets name of the parameter.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IParameter.TypeName">
            <summary>
            Gets type name of the parameter.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IParameter.Value">
            <summary>
             Gets value of the parameter.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IParameter.Sequence">
            <summary>
            Gets sequence of the parameter in the method.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IParameter.CustomAttributes">
            <summary>
            Gets all custom attributes of the method.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.IParameterBuilder">
            <summary>
            Parameter metadata being built up.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.IParameterBuilder.AddCustomAttribute(CrossCutterN.Base.Metadata.ICustomAttribute)">
            <summary>
            Adds a custom attribute metadata.
            </summary>
            <param name="attribute">Custom attribute metadata to be added.</param>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.IReturn">
            <summary>
            Return value metadata interface.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IReturn.HasReturn">
            <summary>
            Gets a value indicating whether there is a return value, if the return type is void or an uncaught exception happened during the execution, this value will be false.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IReturn.TypeName">
            <summary>
            Gets type name of the return value.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IReturn.Value">
            <summary>
            Gets value of the return value.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.IReturnBuilder">
            <summary>
            Return value metadata being built.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IReturnBuilder.HasReturn">
            <summary>
            Sets a value indicating whether there is a return value, if the return type is void or an uncaught exception happened during the execution, this value will be false.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.IReturnBuilder.Value">
            <summary>
            Sets value of the return value.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.MetadataFactory">
            <summary>
            Metadata factory.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.MetadataFactory.InitializeExecution(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Metadata.IExecutionBuilder"/>.
            </summary>
            <param name="assemblyFullName">Full name of the assembly in which the method is defined.</param>
            <param name="nameSpace">Namespace in which the method is defined.</param>
            <param name="classFullName">Full name of the class in which the method is defined.</param>
            <param name="className">Name of the class in which the method is defined.</param>
            <param name="fullName">Full name of the method</param>
            <param name="name">Name of the method.</param>
            <param name="returnType">Return type of the method.</param>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Metadata.IExecutionBuilder"/>.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.MetadataFactory.InitializeExecutionContext">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Metadata.IExecutionContext"/>.
            </summary>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Metadata.IExecutionContext"/>.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.MetadataFactory.InitializeParameter(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Metadata.IParameterBuilder"/>.
            </summary>
            <param name="name">Name of the parameter.</param>
            <param name="typeName">Type name of the parameter.</param>
            <param name="sequence">Sequence of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Metadata.IParameterBuilder"/>.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.MetadataFactory.InitializeCustomAttribute(System.String,System.Int32)">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Metadata.ICustomAttributeBuilder"/>.
            </summary>
            <param name="typeName">Type name of the custom attribute.</param>
            <param name="sequence">Sequence of the custom attribute in the parameter.</param>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Metadata.ICustomAttributeBuilder"/>.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.MetadataFactory.InitializeAttributeProperty(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Metadata.IAttributeProperty"/>.
            </summary>
            <param name="name">Name of the attribute property.</param>
            <param name="typeName">Type name of the attribute property.</param>
            <param name="sequence">Sequence of the attribute property in the custom attribute.</param>
            <param name="value">Value fo the attribute property.</param>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Metadata.IAttributeProperty"/>.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.MetadataFactory.InitializeReturn(System.String)">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Metadata.IReturnBuilder"/>.
            </summary>
            <param name="typeName">Type name of the return value.</param>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Metadata.IReturnBuilder"/>.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.Parameter">
            <summary>
            Parameter metadata implementation
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Parameter.#ctor(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Metadata.Parameter"/> class.
            </summary>
            <param name="name">Name of the parameter.</param>
            <param name="typeName">Type name of the parameter.</param>
            <param name="sequence">Sequence of the parameter in method.</param>
            <param name="value">Value of the parameter.</param>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Parameter.Name">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Parameter.TypeName">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Parameter.Value">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Parameter.Sequence">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Parameter.Key">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Parameter.SortKey">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Parameter.CustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Parameter.AddCustomAttribute(CrossCutterN.Base.Metadata.ICustomAttribute)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Parameter.Build">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Metadata.Return">
            <summary>
            Return value metadata implementation.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Return.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Metadata.Return"/> class.
            </summary>
            <param name="typeName">Type name of the return value.</param>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Return.HasReturn">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Return.TypeName">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.Metadata.Return.Value">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Metadata.Return.Build">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.MultiThreading.IReadWriteLock">
            <summary>
            Re-entrant, multi-reader, one writer, avoiding missed notification, avoiding spurious wake up
            on-going thread has the priority, write requests take priority to read requests
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.IReadWriteLock.AcquireReadLock">
            <summary>
            Acquires read lock, wait if the read lock can't be acquired currently
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.IReadWriteLock.AcquireWriteLock">
            <summary>
            Acquires write lock, wait if the write lock can't be acquired currently
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.IReadWriteLock.ReleaseReadLock">
            <summary>
            Releases read lock, only if a read lock has been acquired by the same thread previously
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.IReadWriteLock.ReleaseWriteLock">
            <summary>
            Releases write lock, only if a write lock has been acquired by the same thread previously
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.MultiThreading.ISmartLock">
            <summary>
            Smart lock implementation, supposed to be working with using statement
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.MultiThreading.ISmartReadWriteLock">
            <summary>
            Smart read write lock interface
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.MultiThreading.ISmartReadWriteLock.ReadLock">
            <summary>
            Gets the read lock
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.MultiThreading.ISmartReadWriteLock.WriteLock">
            <summary>
            Gets the write lock
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.MultiThreading.LockFactory">
            <summary>
            Lock factory
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.LockFactory.GetSmartReadWriteLock">
            <summary>
            Gets an instnce of smart read write lock
            </summary>
            <returns>Smart read write lock interface</returns>
        </member>
        <member name="T:CrossCutterN.Base.MultiThreading.ReadWriteLock">
            <summary>
            Read write lock implementation
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.ReadWriteLock.AcquireReadLock">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.ReadWriteLock.AcquireWriteLock">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.ReadWriteLock.ReleaseReadLock">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.ReadWriteLock.ReleaseWriteLock">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.MultiThreading.SmartReadWriteLock">
            <summary>
            Smart read write lock implementation.
            This is a wrapper class for <see cref="T:CrossCutterN.Base.MultiThreading.IReadWriteLock"/> interface, the read locks and write locks acquired can be automatically disposed by using statement, so it helps to keep the code clean.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.MultiThreading.SmartReadWriteLock.#ctor(CrossCutterN.Base.MultiThreading.IReadWriteLock)">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.MultiThreading.SmartReadWriteLock"/> class.
            </summary>
            <param name="lck">Read write lock </param>
        </member>
        <member name="P:CrossCutterN.Base.MultiThreading.SmartReadWriteLock.ReadLock">
            <inheritdoc/>
        </member>
        <member name="P:CrossCutterN.Base.MultiThreading.SmartReadWriteLock.WriteLock">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Switch.AspectSwitch">
            <summary>
            Considering this aspect switching isn't supposed to happen often, crude lock(this) is used to cater for multithreading.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.Complete(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.IsOn(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.RegisterSwitch(System.String,System.String,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.Switch(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.Switch(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.Switch(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.Switch(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.Switch(System.Reflection.PropertyInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.Switch(System.Reflection.MethodInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.Switch(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOff(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOff(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOff(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOff(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOff(System.Reflection.PropertyInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOff(System.Reflection.MethodInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOff(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOn(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOn(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOn(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOn(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOn(System.Reflection.PropertyInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOn(System.Reflection.MethodInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.SwitchOn(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.AspectSwitch.GetSwitchStatus(System.Reflection.MethodInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Switch.ClassAspectSwitch">
            <summary>
            Class aspect index on registered switch list
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.#ctor(System.Collections.Generic.IList{System.Boolean},CrossCutterN.Base.MultiThreading.ISmartReadWriteLock)">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Switch.ClassAspectSwitch"/> class.
            </summary>
            <param name="switchList">List of all registered switches</param>
            <param name="lck">Lock of registered switch list</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.IsAspectApplied(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.Switch(CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.SwitchAspect(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.SwitchMethod(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.SwitchMethodAspect(System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.SwitchProperty(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.SwitchPropertyAspect(System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.RegisterSwitch(System.Int32,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.Build(System.String,CrossCutterN.Base.Switch.IClassAspectSwitchOperation,System.Collections.Generic.Dictionary{System.String,CrossCutterN.Base.Switch.SwitchOperationStatus})">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitch.Lookup(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Switch.ClassAspectSwitchOperation">
            <summary>
            Operation record for not loaded class implementation
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitchOperation.#ctor(CrossCutterN.Base.Switch.SequenceGenerator,System.Collections.Generic.IReadOnlyDictionary{System.String,CrossCutterN.Base.Switch.SwitchOperationStatus})">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Switch.ClassAspectSwitchOperation"/> class.
            </summary>
            <param name="sequenceGenerator">Sequence generator for operations.</param>
            <param name="aspectOperations">Operations on aspects.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitchOperation.Switch(CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitchOperation.SwitchAspect(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitchOperation.SwitchAspect(System.String,CrossCutterN.Base.Switch.SwitchOperation,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitchOperation.SwitchMethod(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitchOperation.SwitchProperty(System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitchOperation.SwitchMethodAspect(System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitchOperation.SwitchPropertyAspect(System.String,System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.ClassAspectSwitchOperation.GetSwitchValue(System.Boolean,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:CrossCutterN.Base.Switch.IAspectSwitch">
            <summary>
            Switch interface for CrossCutterN user to switch aspects
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.Switch(System.Type)">
            <summary>
            Switches all aspects injected in a class, change switch status to Off if it's On, and change switch status to On if it's off.
            </summary>
            <param name="type">The class that aspects are injected in.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.Switch(System.Reflection.MethodInfo)">
            <summary>
            Switches all aspects injected in a method, change switch status to Off if it's On, and change switch status to On if it's off.
            </summary>
            <param name="method">The method that aspects are injected in.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.Switch(System.Reflection.PropertyInfo)">
            <summary>
            Switches all aspects injected in a property, change switch status to Off if it's On, and change switch status to On if it's off.
            </summary>
            <param name="property">The property that aspects are injected in.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.Switch(System.String)">
            <summary>
            Switches an aspect injected in all classes, change switch status to Off if it's On, and change switch status to On if it's off.
            </summary>
            <param name="aspect">Name of the aspect to be switched.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.Switch(System.Type,System.String)">
            <summary>
            Switches an aspect injected in a class, change switch status to Off if it's On, and change switch status to On if it's off.
            </summary>
            <param name="type">The class that the aspect is injected in.</param>
            <param name="aspect">Name of the aspect to be switched.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.Switch(System.Reflection.MethodInfo,System.String)">
            <summary>
            Switches an aspect injected in a method, change switch status to Off if it's On, and change switch status to On if it's off.
            </summary>
            <param name="method">The method that the aspect is injected in.</param>
            <param name="aspect">Name of the aspect to be switched.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.Switch(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Switches an aspect injected in a property, change switch status to Off if it's On, and change switch status to On if it's off.
            </summary>
            <param name="property">The property that the aspect is injected in.</param>
            <param name="aspect">Name of the aspect to be switched.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOn(System.Type)">
            <summary>
            Switches on all aspects injected in a class, change switch status to On no matter what it is.
            </summary>
            <param name="type">The class that aspects are injected in.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOn(System.Reflection.MethodInfo)">
            <summary>
            Switches on all aspects injected in a method, change switch status to On no matter what it is.
            </summary>
            <param name="method">The method that aspects are injected in.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOn(System.Reflection.PropertyInfo)">
            <summary>
            Switches on all aspects injected in a property, change switch status to On no matter what it is.
            </summary>
            <param name="property">The property that aspects are injected in.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOn(System.String)">
            <summary>
            Switches on an aspect injected in all classes, change switch status to On if it's On no matter what it is.
            </summary>
            <param name="aspect">Name of the aspect to be switched on.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOn(System.Type,System.String)">
            <summary>
            Switches on an aspect injected in a class, change switch status to On no matter what it is.
            </summary>
            <param name="type">The class that the aspect is injected in.</param>
            <param name="aspect">Name of the aspect to be switched on.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOn(System.Reflection.MethodInfo,System.String)">
            <summary>
            Switch on an aspect injected in a method, change switch status to On no matter what it is.
            </summary>
            <param name="method">The method that the aspect is injected in.</param>
            <param name="aspect">Name of the aspect to be switched on.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOn(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Switches on an aspect injected in a property, change switch status to On no matter what it is.
            </summary>
            <param name="property">The property that the aspect is injected in.</param>
            <param name="aspect">Name of the aspect to be switched on.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOff(System.Type)">
            <summary>
            Switches off all aspects injected in a class, change switch status to Off no matter what it is.
            </summary>
            <param name="type">The class that aspects are injected in.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOff(System.Reflection.MethodInfo)">
            <summary>
            Switches off all aspects injected in a class, change switch status to Off no matter what it is.
            </summary>
            <param name="method">The method that aspects are injected in.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOff(System.Reflection.PropertyInfo)">
            <summary>
            Switches off all aspects injected in a property, change switch status to Off no matter what it is.
            </summary>
            <param name="property">The property that aspects are injected in.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOff(System.String)">
            <summary>
            Switches off an aspect injected in all classes, change switch status to Off if it's On no matter what it is.
            </summary>
            <param name="aspect">Name of the aspect to be switched.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOff(System.Type,System.String)">
            <summary>
            Switch off an aspect injected in a class, change switch status to Off no matter what it is.
            </summary>
            <param name="type">The class that the aspect is injected in.</param>
            <param name="aspect">Name of the aspect to be switched off.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOff(System.Reflection.MethodInfo,System.String)">
            <summary>
            Switches off an aspect injected in a class, change switch status to Off no matter what it is.
            </summary>
            <param name="method">The method that the aspect is injected in.</param>
            <param name="aspect">Name of the aspect to be switched off.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.SwitchOff(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Switches off an aspect injected in a method, change switch status to Off no matter what it is.
            </summary>
            <param name="property">The property that the aspect is injected in.</param>
            <param name="aspect">Name of the aspect to be switched off.</param>
            <returns>Number of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitch.GetSwitchStatus(System.Reflection.MethodInfo,System.String)">
            <summary>
            Gets switch status of an aspect in a method.
            Without clear requirements, this version doesn't support massive switch status lookup.
            This is the only lookup interface for user to check switch status for an aspect in a method.
            </summary>
            <param name="method">Method that aspect is injected to.</param>
            <param name="aspect">Name of aspect to be looked up.</param>
            <returns>Null if aspect isn't injected into method, or aspect is not switchable. True if aspect is switched on, false elsewise.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Switch.IAspectSwitchBuilder">
            <summary>
            Interface of class indexer of switch list being built up.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitchBuilder.RegisterSwitch(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Registers an aspect switch in switch list.
            </summary>
            <param name="clazz">Class that the switched aspect injected in.</param>
            <param name="property">Property that the switched aspect injected in.</param>
            <param name="methodSignature">Signature of method that the switched aspect injected in.</param>
            <param name="aspect">Name of the aspect injected and to be switched.</param>
            <param name="value">Default switch status value.</param>
            <returns>Id of the registered switch.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitchBuilder.Complete(System.String)">
            <summary>
            Completes switch registration for a class, after the completion, no switch can be registered for the class.
            </summary>
            <param name="clazz">Name of the class to complete switch registration.</param>
        </member>
        <member name="T:CrossCutterN.Base.Switch.IAspectSwitchGlancer">
            <summary>
            Switch status glancer interface.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IAspectSwitchGlancer.IsOn(System.Int32)">
            <summary>
            Gets a value indicates whether the switch of the id is on. This method is only supposed to be called by generated code, not CrossCutterN users.
            </summary>
            <param name="id">Id of the switch.</param>
            <returns>True if the switch is on, false elsewise.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Switch.IClassAspectSwitch">
            <summary>
            Indexer for easily switching AOP method calls via class, member methods and properties.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitch.IsAspectApplied(System.String)">
            <summary>
            Check if an aspect has been applied to this class.
            </summary>
            <param name="aspect">Name of the aspect.</param>
            <returns>True if the aspect is applied to this class, false if not.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitch.Switch(CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches all aspects injected into this class according to operation parameter input.
            </summary>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
            <returns>Numer of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitch.SwitchMethod(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches all aspects injected into the method of the class with the method signature according to operation parameter input.
            </summary>
            <param name="methodSignature">Signature of method that aspects are injected into.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
            <returns>Numer of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitch.SwitchProperty(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches all aspects injected into the property of the class with the property name according to operation parameter input.
            </summary>
            <param name="propertyName">Name or property that aspects are injected into.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
            <returns>Numer of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitch.SwitchAspect(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches an aspect injected into the class according to operation parameter input.
            </summary>
            <param name="aspect">Name of the aspect to be switched.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
            <returns>Numer of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitch.SwitchMethodAspect(System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches an aspects injected into a method of the class with the method signature according to operation parameter input.
            </summary>
            <param name="methodSignature">Signature of the method that the aspect is injected into.</param>
            <param name="aspect">Name of the aspect to be switched.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
            <returns>Numer of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitch.SwitchPropertyAspect(System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches an aspects injected into a property of the class with the property name according to operation parameter input.
            </summary>
            <param name="propertyName">Name of the property that the aspect is injected into.</param>
            <param name="aspect">Name of the aspect to be switched.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
            <returns>Numer of aspects affected.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitch.Lookup(System.String,System.String)">
            <summary>
            Looks up a aspect switch status in this indexer
            </summary>
            <param name="methodSignature">Signature of the method that the aspect is injected into.</param>
            <param name="aspect">Name of the aspect to be looked up.</param>
            <returns>
                Null for the aspect isn't injected into the method or the aspect injected into the method is not switchable.
                True if the aspect injected to the method is switched on, false elsewise.
            </returns>
        </member>
        <member name="T:CrossCutterN.Base.Switch.IClassAspectSwitchBuilder">
            <summary>
            Interface of a class indexer of switch list being built up.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchBuilder.RegisterSwitch(System.Int32,System.String,System.String,System.String)">
            <summary>
            Registers a switch.
            </summary>
            <param name="id">Id of the switch.</param>
            <param name="propertyName">Name of the property injected.</param>
            <param name="methodSignature">Signature of method injected.</param>
            <param name="aspect">Name of aspect to be switched.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchBuilder.Build(System.String,CrossCutterN.Base.Switch.IClassAspectSwitchOperation,System.Collections.Generic.Dictionary{System.String,CrossCutterN.Base.Switch.SwitchOperationStatus})">
            <summary>
            Builds to interface <see cref="T:CrossCutterN.Base.Switch.IClassAspectSwitch"/>.
            </summary>
            <param name="clazz">Name of the class.</param>
            <param name="classOperations">Operation records before the class is loaded of the class</param>
            <param name="aspectOperations">Operation records before the class is loaded of the aspect.</param>
            <returns>Built class indexer of switch list.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Switch.IClassAspectSwitchOperation">
            <summary>
            Operation record for classes that are not loaded yet
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchOperation.Switch(CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches all aspects injected into this class according to operation parameter input.
            </summary>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchOperation.SwitchMethod(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches all aspects injected into the method of the class with the method signature according to operation parameter input.
            </summary>
            <param name="methodSignature">Signature of method that aspects are injected into.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchOperation.SwitchProperty(System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches all aspects injected into the property of the class which has the same signatures of input getter signagure and setter signature according to operation input.
            </summary>
            <param name="getterSignature">Getter method signature.</param>
            <param name="setterSignature">Setter method signature.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchOperation.SwitchAspect(System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches an aspect injected into the class according to operation parameter input.
            </summary>
            <param name="aspect">Name of the aspect to be switched.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchOperation.SwitchAspect(System.String,CrossCutterN.Base.Switch.SwitchOperation,System.Int32)">
            <summary>
            Switches an aspect injected into the class according to operation parameter input.
            </summary>
            <param name="aspect">Name of the aspect to be switched.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
            <param name="sequence">Sequence of this switch operation, it matters for switch status overwrite calculation.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchOperation.SwitchMethodAspect(System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches an aspects injected into a method of the class with the method signature according to operation parameter input.
            </summary>
            <param name="methodSignature">Signature of the method that the aspect is injected into.</param>
            <param name="aspect">Name of the aspect to be switched.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchOperation.SwitchPropertyAspect(System.String,System.String,System.String,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Switches an aspect injected into the property of the class which has the same signatures of input getter signagure and setter signature according to operation input.
            </summary>
            <param name="getterSignature">Getter method signature.</param>
            <param name="setterSignature">Setter method signature.</param>
            <param name="aspect">Name of the aspect to be switched.</param>
            <param name="operation">Switch operation, <see cref="T:CrossCutterN.Base.Switch.SwitchOperation"/>.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.IClassAspectSwitchOperation.GetSwitchValue(System.Boolean,System.String,System.String)">
            <summary>
            Gets the switch status value of the given aspect injected to the method which has the input method signature.
            </summary>
            <param name="value">Default value of switch status.</param>
            <param name="methodSignature">Signature of the method which the aspect is injected into.</param>
            <param name="aspect">Name of the aspect the switch status of which is to be calculated.</param>
            <returns>True if switched on, false elsewise.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Switch.SequenceGenerator">
            <summary>
            Switch operation sequence generator
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Switch.SequenceGenerator.Next">
            <summary>
            Gets next sequence number.
            </summary>
            <returns>Next sequence number.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Switch.SwitchBackStage">
            <summary>
            Back stage switch user interface, only supposed to be called by injected code of CrossCutterN, not supposed to be called by CrossCutterN users.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Switch.SwitchBackStage.Glancer">
            <summary>
            Gets the look up interface.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Switch.SwitchBackStage.Builder">
            <summary>
            Gets the build up interface
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Switch.SwitchBackStage.Switch">
            <summary>
            Gets the aspect switch.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Switch.SwitchFacade">
            <summary>
            Facade for switching aspects, intended to be used by CrossCutterN users.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Switch.SwitchFacade.Controller">
            <summary>
            Gets the switch controller
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Switch.SwitchFactory">
            <summary>
            Switch factory.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchFactory.InitializeClassAspectSwitch(System.Collections.Generic.IList{System.Boolean},CrossCutterN.Base.MultiThreading.ISmartReadWriteLock)">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Switch.IClassAspectSwitchBuilder"/>.
            </summary>
            <param name="switchList">Switch list to be indexed on.</param>
            <param name="lck">Lock for the switch list.</param>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Switch.IClassAspectSwitchBuilder"/>.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchFactory.InitializeClassAspectSwitchOperation(CrossCutterN.Base.Switch.SequenceGenerator,System.Collections.Generic.IReadOnlyDictionary{System.String,CrossCutterN.Base.Switch.SwitchOperationStatus})">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Switch.IClassAspectSwitchOperation"/>.
            </summary>
            <param name="sequenceGenerator">Sequence generator used to generate sequence number.</param>
            <param name="aspectOperations">Operation records of aspects.</param>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Switch.IClassAspectSwitchOperation"/>.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchFactory.InitializeSwitchOperationStatus(CrossCutterN.Base.Switch.SequenceGenerator,CrossCutterN.Base.Switch.SwitchOperationStatus)">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Switch.SwitchOperationStatus"/>. Switch operation status will be calculated based on Default status and operation.
            </summary>
            <param name="sequenceGenerator">Sequence generator used to generate sequence number.</param>
            <param name="operation">Switch operation status.</param>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Switch.SwitchOperationStatus"/></returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchFactory.InitializeSwitchOperationStatus(CrossCutterN.Base.Switch.SequenceGenerator,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Switch.SwitchOperationStatus"/>.
            </summary>
            <param name="sequenceGenerator">Sequence generator used to generate sequence number.</param>
            <param name="operation">Switch operation.</param>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Switch.SwitchOperationStatus"/></returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchFactory.InitializeAspectSwitch">
            <summary>
            Initializes a new instance of of <see cref="T:CrossCutterN.Base.Switch.AspectSwitch"/>.
            </summary>
            <returns>The initialized <see cref="T:CrossCutterN.Base.Switch.AspectSwitch"/>.</returns>
        </member>
        <member name="T:CrossCutterN.Base.Switch.SwitchStatus">
            <summary>
            Status of an aspect switch.
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Switch.SwitchStatus.Default">
            <summary>
            Default value according to configuration, can be On or Off.
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Switch.SwitchStatus.Switched">
            <summary>
            Switched from default value, if default value is on, then Switched means Off, and vise versa.
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Switch.SwitchStatus.On">
            <summary>
            Switched on.
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Switch.SwitchStatus.Off">
            <summary>
            Switched off.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Switch.SwitchOperation">
            <summary>
            Switch operation type against <see cref="T:CrossCutterN.Base.Switch.SwitchStatus"/>.
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Switch.SwitchOperation.Switch">
            <summary>
            Switch operation, change Default to Switched, Off to On and On to Off.
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Switch.SwitchOperation.On">
            <summary>
            Switch on.
            </summary>
        </member>
        <member name="F:CrossCutterN.Base.Switch.SwitchOperation.Off">
            <summary>
            Switch off.
            </summary>
        </member>
        <member name="T:CrossCutterN.Base.Switch.SwitchOperationStatus">
            <summary>
            Status of an aspect switch.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchOperationStatus.#ctor(CrossCutterN.Base.Switch.SequenceGenerator,CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Switch.SwitchOperationStatus"/> class.
            </summary>
            <param name="sequenceGenerator">Sequence number generator used to generate operation sequence number in case it is not provided.</param>
            <param name="operation">Operation</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchOperationStatus.#ctor(CrossCutterN.Base.Switch.SequenceGenerator,CrossCutterN.Base.Switch.SwitchOperationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:CrossCutterN.Base.Switch.SwitchOperationStatus"/> class.
            </summary>
            <param name="sequenceGenerator">Sequence number generator used to generate operation sequence number in case it is not provided.</param>
            <param name="operation">Operation</param>
        </member>
        <member name="P:CrossCutterN.Base.Switch.SwitchOperationStatus.Sequence">
            <summary>
            Gets operation sequence.
            </summary>
        </member>
        <member name="P:CrossCutterN.Base.Switch.SwitchOperationStatus.Status">
            <summary>
            Gets switch status.
            </summary>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchOperationStatus.Switch(CrossCutterN.Base.Switch.SwitchOperation)">
            <summary>
            Applies switch operation to this switch status.
            </summary>
            <param name="operation">Operation to be applied.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchOperationStatus.Switch(CrossCutterN.Base.Switch.SwitchOperation,System.Int32)">
            <summary>
            Applies switch operation to this switch status.
            </summary>
            <param name="operation">Operation to be applied.</param>
            <param name="sequence">Operation sequence number.</param>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchOperationStatus.Switch(System.Boolean)">
            <summary>
            Gets aspect switch status based on internal switch status record.
            </summary>
            <param name="value">Original switch value.</param>
            <returns>Switched switch value.</returns>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchOperationStatus.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:CrossCutterN.Base.Switch.SwitchOperationStatus.Equals(System.Object)">
            <inheritdoc/>
        </member>
    </members>
</doc>
